
allprojects {
    System.setProperty("jsse.enableSNIExtension", "false")    
    
    configurations {
        checkstyleConfig
    }

    dependencies {
        checkstyleConfig group: "com.github.baleio.checkstyle", name: "checkstyle-config", version: "1.0.0-SNAPSHOT"
    }

    ext {
        checkstyleConfigDir = "$buildDir/checkstyle"
        checkstyleConfigFile = new File("$checkstyleConfigDir/checkstyle.xml")
        checkstyleSupressionsFile = new File("$checkstyleConfigDir/checkstyle-suppressions.xml")
    }
    
    afterEvaluate { project ->
        def javaProject = project.plugins.hasPlugin("java")

        def checkstyleProps = new HashMap<String, Object>()
        checkstyleProps.put("checkstyle.suppressions.file", checkstyleSupressionsFile)

        if (javaProject) {
             if (!project.hasProperty("skipChecks") && !project.hasProperty("skipCheckstyle")) {
                // Add Checkstyle plugin.
                project.apply plugin: "checkstyle"
    
                checkstyle {
                    configFile = checkstyleConfigFile
                    configProperties = checkstyleProps
            
                    if (project.hasProperty("ignoreFailures") || project.hasProperty("checkstyleIgnoreFailures")) {
                        ignoreFailures = true
                        logger.info("Ignoring failures for checkstyle")
                     } 
                }

                task extractCheckstyleConfig(type: Copy) {
                    dependsOn project.configurations.checkstyleConfig

                    from { // use of closure defers evaluation until execution time
                        project.configurations.checkstyleConfig.collect { project.zipTree(it) }
                    } 
                    into "$checkstyleConfigDir"
                }

                // For each Checkstyle task we make sure
                // the company Checkstyle configuration is
                // first downloaded.
                tasks.withType(Checkstyle) {
                    it.dependsOn "extractCheckstyleConfig"
                }
             }
        }
    }
}
 
class DownloadFile extends DefaultTask {
    @Input
    String src
 
    @OutputFile
    File dest
 
    @TaskAction
    def downloadFile() {
        dest.bytes = new URL(src).bytes
    }
}

